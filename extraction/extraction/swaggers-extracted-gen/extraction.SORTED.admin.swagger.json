{
    "swagger": "2.0", 
    "info": {
        "title": "Resource Inventory Management", 
        "description": "This is Swagger UI environment generated for the TMF Resource Inventory Management specification", 
        "version": "2.0"
    }, 
    "host": "serverRoot", 
    "basePath": "/tmf-api/resourceInventoryManagement/v2/", 
    "schemes": [
        "https"
    ], 
    "consumes": [
        "application/json;charset=utf-8"
    ], 
    "produces": [
        "application/json;charset=utf-8"
    ], 
    "paths": {
        "/hub": {
            "post": {
                "operationId": "registerListener", 
                "summary": "Register a listener", 
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "description": "Data containing the callback endpoint to deliver the information", 
                        "in": "body", 
                        "name": "data", 
                        "required": true, 
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        }
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Subscribed", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener", 
                "summary": "Unregister a listener", 
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "description": "The id of the registered listener", 
                        "in": "path", 
                        "name": "id", 
                        "required": true, 
                        "type": "string"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/logicalResource": {
            "get": {
                "operationId": "listLogicalResource", 
                "summary": "List or find LogicalResource objects", 
                "description": "This operation list or find LogicalResource entities", 
                "tags": [
                    "logicalResource"
                ], 
                "parameters": [
                    {
                        "description": "Comma-separated properties to be provided in response", 
                        "in": "query", 
                        "name": "fields", 
                        "required": false, 
                        "type": "string"
                    }, 
                    {
                        "description": "Requested index for start of resources to be provided in response", 
                        "in": "query", 
                        "name": "offset", 
                        "required": false, 
                        "type": "integer"
                    }, 
                    {
                        "description": "Requested number of resources to be provided in response", 
                        "in": "query", 
                        "name": "limit", 
                        "required": false, 
                        "type": "integer"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body", 
                                "type": "integer"
                            }, 
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria", 
                                "type": "integer"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/LogicalResource"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createLogicalResource", 
                "summary": "Creates a LogicalResource", 
                "description": "This operation creates a LogicalResource entity.", 
                "tags": [
                    "logicalResource"
                ], 
                "parameters": [
                    {
                        "description": "The LogicalResource to be created", 
                        "in": "body", 
                        "name": "logicalResource", 
                        "required": true, 
                        "schema": {
                            "$ref": "#/definitions/LogicalResource_Create"
                        }
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/LogicalResource"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/logicalResource/{id}": {
            "get": {
                "operationId": "retrieveLogicalResource", 
                "summary": "Retrieves a LogicalResource by ID", 
                "description": "This operation retrieves a LogicalResource entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "logicalResource"
                ], 
                "parameters": [
                    {
                        "description": "Identifier of the LogicalResource", 
                        "in": "path", 
                        "name": "id", 
                        "required": true, 
                        "type": "string"
                    }, 
                    {
                        "description": "Comma-separated properties to provide in response", 
                        "in": "query", 
                        "name": "fields", 
                        "required": false, 
                        "type": "string"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/LogicalResource"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchLogicalResource", 
                "summary": "Updates partially a LogicalResource", 
                "description": "This operation updates partially a LogicalResource entity.", 
                "tags": [
                    "logicalResource"
                ], 
                "parameters": [
                    {
                        "description": "Identifier of the LogicalResource", 
                        "in": "path", 
                        "name": "id", 
                        "required": true, 
                        "type": "string"
                    }, 
                    {
                        "description": "The LogicalResource to be updated", 
                        "in": "body", 
                        "name": "logicalResource", 
                        "required": true, 
                        "schema": {
                            "$ref": "#/definitions/LogicalResource_Update"
                        }
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/LogicalResource"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteLogicalResource", 
                "summary": "Deletes a LogicalResource", 
                "description": "This operation deletes a LogicalResource entity.", 
                "tags": [
                    "logicalResource"
                ], 
                "parameters": [
                    {
                        "description": "Identifier of the LogicalResource", 
                        "in": "path", 
                        "name": "id", 
                        "required": true, 
                        "type": "string"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/physicalResource": {
            "get": {
                "operationId": "listPhysicalResource", 
                "summary": "List or find PhysicalResource objects", 
                "description": "This operation list or find PhysicalResource entities", 
                "tags": [
                    "physicalResource"
                ], 
                "parameters": [
                    {
                        "description": "Comma-separated properties to be provided in response", 
                        "in": "query", 
                        "name": "fields", 
                        "required": false, 
                        "type": "string"
                    }, 
                    {
                        "description": "Requested index for start of resources to be provided in response", 
                        "in": "query", 
                        "name": "offset", 
                        "required": false, 
                        "type": "integer"
                    }, 
                    {
                        "description": "Requested number of resources to be provided in response", 
                        "in": "query", 
                        "name": "limit", 
                        "required": false, 
                        "type": "integer"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body", 
                                "type": "integer"
                            }, 
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria", 
                                "type": "integer"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PhysicalResource"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createPhysicalResource", 
                "summary": "Creates a PhysicalResource", 
                "description": "This operation creates a PhysicalResource entity.", 
                "tags": [
                    "physicalResource"
                ], 
                "parameters": [
                    {
                        "description": "The PhysicalResource to be created", 
                        "in": "body", 
                        "name": "physicalResource", 
                        "required": true, 
                        "schema": {
                            "$ref": "#/definitions/PhysicalResource_Create"
                        }
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/PhysicalResource"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/physicalResource/{id}": {
            "get": {
                "operationId": "retrievePhysicalResource", 
                "summary": "Retrieves a PhysicalResource by ID", 
                "description": "This operation retrieves a PhysicalResource entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "physicalResource"
                ], 
                "parameters": [
                    {
                        "description": "Identifier of the PhysicalResource", 
                        "in": "path", 
                        "name": "id", 
                        "required": true, 
                        "type": "string"
                    }, 
                    {
                        "description": "Comma-separated properties to provide in response", 
                        "in": "query", 
                        "name": "fields", 
                        "required": false, 
                        "type": "string"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/PhysicalResource"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchPhysicalResource", 
                "summary": "Updates partially a PhysicalResource", 
                "description": "This operation updates partially a PhysicalResource entity.", 
                "tags": [
                    "physicalResource"
                ], 
                "parameters": [
                    {
                        "description": "Identifier of the PhysicalResource", 
                        "in": "path", 
                        "name": "id", 
                        "required": true, 
                        "type": "string"
                    }, 
                    {
                        "description": "The PhysicalResource to be updated", 
                        "in": "body", 
                        "name": "physicalResource", 
                        "required": true, 
                        "schema": {
                            "$ref": "#/definitions/PhysicalResource_Update"
                        }
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/PhysicalResource"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deletePhysicalResource", 
                "summary": "Deletes a PhysicalResource", 
                "description": "This operation deletes a PhysicalResource entity.", 
                "tags": [
                    "physicalResource"
                ], 
                "parameters": [
                    {
                        "description": "Identifier of the PhysicalResource", 
                        "in": "path", 
                        "name": "id", 
                        "required": true, 
                        "type": "string"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/resource": {
            "get": {
                "operationId": "listResource", 
                "summary": "List or find Resource objects", 
                "description": "This operation list or find Resource entities", 
                "tags": [
                    "resource"
                ], 
                "parameters": [
                    {
                        "description": "Comma-separated properties to be provided in response", 
                        "in": "query", 
                        "name": "fields", 
                        "required": false, 
                        "type": "string"
                    }, 
                    {
                        "description": "Requested index for start of resources to be provided in response", 
                        "in": "query", 
                        "name": "offset", 
                        "required": false, 
                        "type": "integer"
                    }, 
                    {
                        "description": "Requested number of resources to be provided in response", 
                        "in": "query", 
                        "name": "limit", 
                        "required": false, 
                        "type": "integer"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body", 
                                "type": "integer"
                            }, 
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria", 
                                "type": "integer"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Resource"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createResource", 
                "summary": "Creates a Resource", 
                "description": "This operation creates a Resource entity.", 
                "tags": [
                    "resource"
                ], 
                "parameters": [
                    {
                        "description": "The Resource to be created", 
                        "in": "body", 
                        "name": "resource", 
                        "required": true, 
                        "schema": {
                            "$ref": "#/definitions/Resource_Create"
                        }
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/Resource"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/resource/{id}": {
            "get": {
                "operationId": "retrieveResource", 
                "summary": "Retrieves a Resource by ID", 
                "description": "This operation retrieves a Resource entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "resource"
                ], 
                "parameters": [
                    {
                        "description": "Identifier of the Resource", 
                        "in": "path", 
                        "name": "id", 
                        "required": true, 
                        "type": "string"
                    }, 
                    {
                        "description": "Comma-separated properties to provide in response", 
                        "in": "query", 
                        "name": "fields", 
                        "required": false, 
                        "type": "string"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Resource"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchResource", 
                "summary": "Updates partially a Resource", 
                "description": "This operation updates partially a Resource entity.", 
                "tags": [
                    "resource"
                ], 
                "parameters": [
                    {
                        "description": "Identifier of the Resource", 
                        "in": "path", 
                        "name": "id", 
                        "required": true, 
                        "type": "string"
                    }, 
                    {
                        "description": "The Resource to be updated", 
                        "in": "body", 
                        "name": "resource", 
                        "required": true, 
                        "schema": {
                            "$ref": "#/definitions/Resource_Update"
                        }
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/Resource"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteResource", 
                "summary": "Deletes a Resource", 
                "description": "This operation deletes a Resource entity.", 
                "tags": [
                    "resource"
                ], 
                "parameters": [
                    {
                        "description": "Identifier of the Resource", 
                        "in": "path", 
                        "name": "id", 
                        "required": true, 
                        "type": "string"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    }, 
    "definitions": {
        "Error": {
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)", 
            "properties": {
                "@baseType": {
                    "description": "When sub-classing, this defines the super-class.", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "When sub-classing, this defines the sub-class entity name.", 
                    "type": "string"
                }, 
                "code": {
                    "description": "Application relevant detail, defined in the API or a common list.", 
                    "type": "string"
                }, 
                "message": {
                    "description": "More details and corrective actions related to the error which can be shown to a client user.", 
                    "type": "string"
                }, 
                "reason": {
                    "description": "Explanation of the reason for the error which can be shown to a client user.", 
                    "type": "string"
                }, 
                "referenceError": {
                    "description": "URI of documentation describing the error.", 
                    "format": "uri", 
                    "type": "string"
                }, 
                "status": {
                    "description": "HTTP Error code extension", 
                    "type": "string"
                }
            }, 
            "required": [
                "code", 
                "reason"
            ], 
            "type": "object"
        }, 
        "EventSubscription": {
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information", 
            "properties": {
                "callback": {
                    "description": "The callback being registered.", 
                    "type": "string"
                }, 
                "id": {
                    "description": "Id of the listener", 
                    "type": "string"
                }, 
                "query": {
                    "description": "additional data to be passed", 
                    "type": "string"
                }
            }, 
            "required": [
                "id", 
                "callback"
            ], 
            "type": "object"
        }, 
        "EventSubscriptionInput": {
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information", 
            "properties": {
                "callback": {
                    "description": "The callback being registered.", 
                    "type": "string"
                }, 
                "query": {
                    "description": "additional data to be passed", 
                    "type": "string"
                }
            }, 
            "required": [
                "callback"
            ], 
            "type": "object"
        }, 
        "LogicalResource": {
            "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.", 
            "properties": {
                "@baseType": {
                    "description": "The base type for use in polymorphic collections", 
                    "type": "string"
                }, 
                "@referredType": {
                    "description": "The actual type of the target instance when needed for disambiguation.", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A link to the schema describing a resource (for type extension).", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "category": {
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource", 
                    "type": "string"
                }, 
                "characteristic": {
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "description": "free-text description of the resource", 
                    "type": "string"
                }, 
                "endDate": {
                    "description": "A date time( DateTime). The date till the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "href": {
                    "description": "The URI for the object itself.", 
                    "type": "string"
                }, 
                "id": {
                    "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type.", 
                    "type": "string"
                }, 
                "lifecycleState": {
                    "description": "The life cycle state of the resource.", 
                    "type": "string"
                }, 
                "name": {
                    "description": "A string used to give a name to the resource", 
                    "type": "string"
                }, 
                "note": {
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "type": "array"
                }, 
                "partyRole": {
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }, 
                    "type": "array"
                }, 
                "place": {
                    "$ref": "#/definitions/Place"
                }, 
                "relatedParty": {
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }, 
                    "type": "array"
                }, 
                "resourceRelationship": {
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }, 
                    "type": "array"
                }, 
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                }, 
                "startDate": {
                    "description": "A date time( DateTime). The date from which the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "value": {
                    "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's", 
                    "type": "string"
                }, 
                "version": {
                    "description": "A field that identifies the specific version of an instance of a resource.", 
                    "type": "string"
                }
            }, 
            "required": [
                "name"
            ], 
            "type": "object"
        }, 
        "LogicalResource_Create": {
            "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.\nSkipped properties: id,href", 
            "properties": {
                "@baseType": {
                    "description": "The base type for use in polymorphic collections", 
                    "type": "string"
                }, 
                "@referredType": {
                    "description": "The actual type of the target instance when needed for disambiguation.", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A link to the schema describing a resource (for type extension).", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "category": {
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource", 
                    "type": "string"
                }, 
                "characteristic": {
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "description": "free-text description of the resource", 
                    "type": "string"
                }, 
                "endDate": {
                    "description": "A date time( DateTime). The date till the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "lifecycleState": {
                    "description": "The life cycle state of the resource.", 
                    "type": "string"
                }, 
                "name": {
                    "description": "A string used to give a name to the resource", 
                    "type": "string"
                }, 
                "note": {
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "type": "array"
                }, 
                "partyRole": {
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }, 
                    "type": "array"
                }, 
                "place": {
                    "$ref": "#/definitions/Place"
                }, 
                "relatedParty": {
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }, 
                    "type": "array"
                }, 
                "resourceRelationship": {
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }, 
                    "type": "array"
                }, 
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                }, 
                "startDate": {
                    "description": "A date time( DateTime). The date from which the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "value": {
                    "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's", 
                    "type": "string"
                }, 
                "version": {
                    "description": "A field that identifies the specific version of an instance of a resource.", 
                    "type": "string"
                }
            }, 
            "required": [
                "name", 
                "value"
            ], 
            "type": "object"
        }, 
        "LogicalResource_Update": {
            "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.\nSkipped properties: id,href", 
            "properties": {
                "@baseType": {
                    "description": "The base type for use in polymorphic collections", 
                    "type": "string"
                }, 
                "@referredType": {
                    "description": "The actual type of the target instance when needed for disambiguation.", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A link to the schema describing a resource (for type extension).", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "category": {
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource", 
                    "type": "string"
                }, 
                "characteristic": {
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "description": "free-text description of the resource", 
                    "type": "string"
                }, 
                "endDate": {
                    "description": "A date time( DateTime). The date till the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "lifecycleState": {
                    "description": "The life cycle state of the resource.", 
                    "type": "string"
                }, 
                "name": {
                    "description": "A string used to give a name to the resource", 
                    "type": "string"
                }, 
                "note": {
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "type": "array"
                }, 
                "partyRole": {
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }, 
                    "type": "array"
                }, 
                "place": {
                    "$ref": "#/definitions/Place"
                }, 
                "relatedParty": {
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }, 
                    "type": "array"
                }, 
                "resourceRelationship": {
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }, 
                    "type": "array"
                }, 
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                }, 
                "startDate": {
                    "description": "A date time( DateTime). The date from which the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "value": {
                    "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's", 
                    "type": "string"
                }, 
                "version": {
                    "description": "A field that identifies the specific version of an instance of a resource.", 
                    "type": "string"
                }
            }, 
            "required": [
                "name"
            ], 
            "type": "object"
        }, 
        "Note": {
            "description": "Extra information about a given entity", 
            "properties": {
                "@baseType": {
                    "description": "When sub-classing, this defines the super-class", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "author": {
                    "description": "Author of the note", 
                    "type": "string"
                }, 
                "date": {
                    "description": "Date of the note", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "text": {
                    "description": "Text of the note", 
                    "type": "string"
                }
            }, 
            "required": [
                "text"
            ], 
            "type": "object"
        }, 
        "PartyRoleRef": {
            "description": "Party role reference. A party role represents the part played by a party in a given context.", 
            "properties": {
                "@baseType": {
                    "description": "When sub-classing, this defines the super-class", 
                    "type": "string"
                }, 
                "@referredType": {
                    "description": "The actual type of the target instance when needed for disambiguation.", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "When sub-classing, this defines the sub-class entity name", 
                    "type": "string"
                }, 
                "href": {
                    "description": "Reference of the product", 
                    "type": "string"
                }, 
                "id": {
                    "description": "Unique identifier of the product", 
                    "type": "string"
                }, 
                "name": {
                    "description": "The name of the referred party role.", 
                    "type": "string"
                }, 
                "partyId": {
                    "description": "The identifier of the engaged party that is linked to the PartyRole object.", 
                    "type": "string"
                }, 
                "partyName": {
                    "description": "The name of the engaged party that is linked to the PartyRole object.", 
                    "type": "string"
                }
            }, 
            "required": [
                "href", 
                "id"
            ], 
            "type": "object"
        }, 
        "PhysicalResource": {
            "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.", 
            "properties": {
                "@baseType": {
                    "description": "The base type for use in polymorphic collections", 
                    "type": "string"
                }, 
                "@referredType": {
                    "description": "The actual type of the target instance when needed for disambiguation.", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A link to the schema describing a resource (for type extension).", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "category": {
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource", 
                    "type": "string"
                }, 
                "characteristic": {
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "description": "free-text description of the resource", 
                    "type": "string"
                }, 
                "endDate": {
                    "description": "A date time( DateTime). The date till the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "href": {
                    "description": "The URI for the object itself.", 
                    "type": "string"
                }, 
                "id": {
                    "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type.", 
                    "type": "string"
                }, 
                "lifecycleState": {
                    "description": "The life cycle state of the resource.", 
                    "type": "string"
                }, 
                "manufactureDate": {
                    "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute.", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "name": {
                    "description": "A string used to give a name to the resource", 
                    "type": "string"
                }, 
                "note": {
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "type": "array"
                }, 
                "partyRole": {
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }, 
                    "type": "array"
                }, 
                "place": {
                    "$ref": "#/definitions/Place"
                }, 
                "powerState": {
                    "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off", 
                    "type": "string"
                }, 
                "relatedParty": {
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }, 
                    "type": "array"
                }, 
                "resourceRelationship": {
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }, 
                    "type": "array"
                }, 
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                }, 
                "serialNumber": {
                    "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute.", 
                    "type": "string"
                }, 
                "startDate": {
                    "description": "A date time( DateTime). The date from which the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "version": {
                    "description": "A field that identifies the specific version of an instance of a resource.", 
                    "type": "string"
                }, 
                "versionNumber": {
                    "description": "This is a string that identifies the version of this object. This is an optional attribute.", 
                    "type": "string"
                }
            }, 
            "required": [
                "name"
            ], 
            "type": "object"
        }, 
        "PhysicalResource_Create": {
            "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.\nSkipped properties: id,href", 
            "properties": {
                "@baseType": {
                    "description": "The base type for use in polymorphic collections", 
                    "type": "string"
                }, 
                "@referredType": {
                    "description": "The actual type of the target instance when needed for disambiguation.", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A link to the schema describing a resource (for type extension).", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "category": {
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource", 
                    "type": "string"
                }, 
                "characteristic": {
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "description": "free-text description of the resource", 
                    "type": "string"
                }, 
                "endDate": {
                    "description": "A date time( DateTime). The date till the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "lifecycleState": {
                    "description": "The life cycle state of the resource.", 
                    "type": "string"
                }, 
                "manufactureDate": {
                    "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute.", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "name": {
                    "description": "A string used to give a name to the resource", 
                    "type": "string"
                }, 
                "note": {
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "type": "array"
                }, 
                "partyRole": {
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }, 
                    "type": "array"
                }, 
                "place": {
                    "$ref": "#/definitions/Place"
                }, 
                "powerState": {
                    "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off", 
                    "type": "string"
                }, 
                "relatedParty": {
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }, 
                    "type": "array"
                }, 
                "resourceRelationship": {
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }, 
                    "type": "array"
                }, 
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                }, 
                "serialNumber": {
                    "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute.", 
                    "type": "string"
                }, 
                "startDate": {
                    "description": "A date time( DateTime). The date from which the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "version": {
                    "description": "A field that identifies the specific version of an instance of a resource.", 
                    "type": "string"
                }, 
                "versionNumber": {
                    "description": "This is a string that identifies the version of this object. This is an optional attribute.", 
                    "type": "string"
                }
            }, 
            "required": [
                "name", 
                "serialNumber"
            ], 
            "type": "object"
        }, 
        "PhysicalResource_Update": {
            "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.\nSkipped properties: id,href", 
            "properties": {
                "@baseType": {
                    "description": "The base type for use in polymorphic collections", 
                    "type": "string"
                }, 
                "@referredType": {
                    "description": "The actual type of the target instance when needed for disambiguation.", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A link to the schema describing a resource (for type extension).", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "category": {
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource", 
                    "type": "string"
                }, 
                "characteristic": {
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "description": "free-text description of the resource", 
                    "type": "string"
                }, 
                "endDate": {
                    "description": "A date time( DateTime). The date till the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "lifecycleState": {
                    "description": "The life cycle state of the resource.", 
                    "type": "string"
                }, 
                "manufactureDate": {
                    "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute.", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "name": {
                    "description": "A string used to give a name to the resource", 
                    "type": "string"
                }, 
                "note": {
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "type": "array"
                }, 
                "partyRole": {
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }, 
                    "type": "array"
                }, 
                "place": {
                    "$ref": "#/definitions/Place"
                }, 
                "powerState": {
                    "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off", 
                    "type": "string"
                }, 
                "relatedParty": {
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }, 
                    "type": "array"
                }, 
                "resourceRelationship": {
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }, 
                    "type": "array"
                }, 
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                }, 
                "serialNumber": {
                    "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute.", 
                    "type": "string"
                }, 
                "startDate": {
                    "description": "A date time( DateTime). The date from which the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "version": {
                    "description": "A field that identifies the specific version of an instance of a resource.", 
                    "type": "string"
                }, 
                "versionNumber": {
                    "description": "This is a string that identifies the version of this object. This is an optional attribute.", 
                    "type": "string"
                }
            }, 
            "required": [
                "name"
            ], 
            "type": "object"
        }, 
        "Place": {
            "description": "Place reference. Place defines the places where the products are sold or delivered.", 
            "properties": {
                "@baseType": {
                    "description": "When sub-classing, this defines the super-class", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "href": {
                    "description": "Unique reference of the place", 
                    "type": "string"
                }, 
                "id": {
                    "description": "Unique identifier of the place", 
                    "type": "string"
                }, 
                "name": {
                    "description": "A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\"", 
                    "type": "string"
                }, 
                "role": {
                    "description": "Role of the place (for instance: 'home delivery', 'shop retrieval')", 
                    "type": "string"
                }
            }, 
            "required": [
                "href", 
                "id", 
                "role"
            ], 
            "type": "object"
        }, 
        "RelatedPartyRef": {
            "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.", 
            "properties": {
                "@baseType": {
                    "description": "When sub-classing, this defines the super-class", 
                    "type": "string"
                }, 
                "@referredType": {
                    "description": "The actual type of the target instance when needed for disambiguation.", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "When sub-classing, this defines the sub-class entity name", 
                    "type": "string"
                }, 
                "href": {
                    "description": "Reference of the related party, could be a party reference or a party role reference", 
                    "type": "string"
                }, 
                "id": {
                    "description": "Unique identifier of a related party", 
                    "type": "string"
                }, 
                "name": {
                    "description": "Name of the related party", 
                    "type": "string"
                }, 
                "role": {
                    "description": "Role of the related party.", 
                    "type": "string"
                }
            }, 
            "required": [
                "id"
            ], 
            "type": "object"
        }, 
        "Resource": {
            "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.", 
            "properties": {
                "@baseType": {
                    "description": "The base type for use in polymorphic collections", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A link to the schema describing a resource (for type extension).", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "category": {
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource", 
                    "type": "string"
                }, 
                "characteristic": {
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "description": "free-text description of the resource", 
                    "type": "string"
                }, 
                "endDate": {
                    "description": "A date time( DateTime). The date till the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "href": {
                    "description": "The URI for the object itself.", 
                    "type": "string"
                }, 
                "id": {
                    "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type.", 
                    "type": "string"
                }, 
                "lifecycleState": {
                    "description": "The life cycle state of the resource.", 
                    "type": "string"
                }, 
                "name": {
                    "description": "A string used to give a name to the resource", 
                    "type": "string"
                }, 
                "note": {
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "type": "array"
                }, 
                "partyRole": {
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }, 
                    "type": "array"
                }, 
                "place": {
                    "$ref": "#/definitions/Place"
                }, 
                "relatedParty": {
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }, 
                    "type": "array"
                }, 
                "resourceRelationship": {
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }, 
                    "type": "array"
                }, 
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                }, 
                "startDate": {
                    "description": "A date time( DateTime). The date from which the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "version": {
                    "description": "A field that identifies the specific version of an instance of a resource.", 
                    "type": "string"
                }
            }, 
            "required": [
                "name"
            ], 
            "type": "object"
        }, 
        "ResourceCharacteristic": {
            "properties": {
                "@baseType": {
                    "description": "When sub-classing, this defines the super-class", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A link to the schema describing a resource (for type extension).", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "name": {
                    "description": "name of the characteristic", 
                    "type": "string"
                }, 
                "value": {
                    "description": "value of the characteristic", 
                    "type": "string"
                }
            }, 
            "type": "object"
        }, 
        "ResourceRef": {
            "properties": {
                "@baseType": {
                    "description": "When sub-classing, this defines the super-class", 
                    "type": "string"
                }, 
                "@referredType": {
                    "description": "The actual type of the target instance when needed for disambiguation.", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "When sub-classing, this defines the sub-class entity name", 
                    "type": "string"
                }, 
                "href": {
                    "type": "string"
                }, 
                "id": {
                    "type": "string"
                }
            }, 
            "required": [
                "id"
            ], 
            "type": "object"
        }, 
        "ResourceRelationship": {
            "properties": {
                "@baseType": {
                    "description": "The base type for use in polymorphic collections", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A link to the schema describing a resource (for type extension).", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "resourceRef": {
                    "$ref": "#/definitions/ResourceRef"
                }, 
                "type": {
                    "type": "string"
                }
            }, 
            "type": "object"
        }, 
        "ResourceSpecificationRef": {
            "description": "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification.", 
            "properties": {
                "@baseType": {
                    "description": "When sub-classing, this defines the super-class", 
                    "type": "string"
                }, 
                "@referredType": {
                    "description": "The actual type of the target instance when needed for disambiguation.", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "When sub-classing, this defines the sub-class entity name", 
                    "type": "string"
                }, 
                "href": {
                    "description": "Reference of the resource specification", 
                    "type": "string"
                }, 
                "id": {
                    "description": "Unique identifier of the resource specification", 
                    "type": "string"
                }, 
                "name": {
                    "description": "Name of the requiredResourceSpecification", 
                    "type": "string"
                }, 
                "version": {
                    "description": "Resource specification version", 
                    "type": "string"
                }
            }, 
            "required": [
                "href", 
                "id"
            ], 
            "type": "object"
        }, 
        "Resource_Create": {
            "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.\nSkipped properties: id,href", 
            "properties": {
                "@baseType": {
                    "description": "The base type for use in polymorphic collections", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A link to the schema describing a resource (for type extension).", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "category": {
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource", 
                    "type": "string"
                }, 
                "characteristic": {
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "description": "free-text description of the resource", 
                    "type": "string"
                }, 
                "endDate": {
                    "description": "A date time( DateTime). The date till the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "lifecycleState": {
                    "description": "The life cycle state of the resource.", 
                    "type": "string"
                }, 
                "name": {
                    "description": "A string used to give a name to the resource", 
                    "type": "string"
                }, 
                "note": {
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "type": "array"
                }, 
                "partyRole": {
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }, 
                    "type": "array"
                }, 
                "place": {
                    "$ref": "#/definitions/Place"
                }, 
                "relatedParty": {
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }, 
                    "type": "array"
                }, 
                "resourceRelationship": {
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }, 
                    "type": "array"
                }, 
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                }, 
                "startDate": {
                    "description": "A date time( DateTime). The date from which the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "version": {
                    "description": "A field that identifies the specific version of an instance of a resource.", 
                    "type": "string"
                }
            }, 
            "required": [
                "name"
            ], 
            "type": "object"
        }, 
        "Resource_Update": {
            "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.\nSkipped properties: id,href", 
            "properties": {
                "@baseType": {
                    "description": "The base type for use in polymorphic collections", 
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "description": "A link to the schema describing a resource (for type extension).", 
                    "type": "string"
                }, 
                "@type": {
                    "description": "The class type of the actual resource (for type extension).", 
                    "type": "string"
                }, 
                "category": {
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource", 
                    "type": "string"
                }, 
                "characteristic": {
                    "items": {
                        "$ref": "#/definitions/ResourceCharacteristic"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "description": "free-text description of the resource", 
                    "type": "string"
                }, 
                "endDate": {
                    "description": "A date time( DateTime). The date till the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "lifecycleState": {
                    "description": "The life cycle state of the resource.", 
                    "type": "string"
                }, 
                "name": {
                    "description": "A string used to give a name to the resource", 
                    "type": "string"
                }, 
                "note": {
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "type": "array"
                }, 
                "partyRole": {
                    "items": {
                        "$ref": "#/definitions/PartyRoleRef"
                    }, 
                    "type": "array"
                }, 
                "place": {
                    "$ref": "#/definitions/Place"
                }, 
                "relatedParty": {
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }, 
                    "type": "array"
                }, 
                "resourceRelationship": {
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }, 
                    "type": "array"
                }, 
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                }, 
                "startDate": {
                    "description": "A date time( DateTime). The date from which the resource is effective", 
                    "format": "date-time", 
                    "type": "string"
                }, 
                "version": {
                    "description": "A field that identifies the specific version of an instance of a resource.", 
                    "type": "string"
                }
            }, 
            "required": [
                "name"
            ], 
            "type": "object"
        }
    }, 
    "tags": [
        {
            "name": "logicalResource"
        }, 
        {
            "name": "physicalResource"
        }, 
        {
            "name": "resource"
        }, 
        {
            "name": "events subscription"
        }
    ]
}